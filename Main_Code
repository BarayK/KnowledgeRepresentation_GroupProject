:-use_module(library(csv)).


?- csv_read_file('/Users/baray_kaya/Desktop/Knowledge Representation /symbolic-output.csv', Data).
 % with this code we have achieved reading csv file long text format
 
 % output shown in this way :
 % Data = [row('', 'A1', '', 'A2', '', 'A3', '', 'A4', '', 'A5', '', 'A6', '', 'A7', ''), row('I1', h, 0.73, vh, 0.49, h, 0.55, h, 0.61, vh, 1.0, vh, 0.78, m, 0.88), row('I2', z, 1.0, vl, 1.0, h, 1.0, vl, 0.88, m, 0.84, m, 1.0, h, 0.84), row('I3', vh, 0.84, h, 1.0, m, 0.78, h, 0.84, h, 0.67, vh, 0.73, m, 0.96), row('I4', vh, 0.55, h, 0.98, h, 0.49, h, 0.55, vh, 0.73, h, 0.88, h, 0.55), row('I5', h, 0.98, vh, 1.0, vh, 1.0, vh, 1.0, vh, 0.98, h, 0.49, h, 0.67), row('I6', h, 0.98, vh, 0.88, vh, 0.92, h, 0.78, vl, 0.98, h, 0.92, m, 1.0), row('I7', h, 0.96, h, 0.49, h, 0.96, vh, 0.78, h, 0.96, m, 0.92, m, 0.96), row(..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ...)|...].

 



""" I am getting this error :
No permission to call sandboxed `open(_1612,_1614,_1616,_1618)'
Reachable from:
	  csv:phrase_from_file(A,B,C)
	  csv_read_file(A,B,C) """
	  
########################################################################################################################################################################
%after this part i tried to generate knowledge base by hand.
	  
% Student exercise profile
:- set_prolog_flag(occurs_check, error).        % disallow cyclic terms
:- set_prolog_stack(global, limit(8 000 000)).  % limit term space (8Mb)
:- set_prolog_stack(local,  limit(2 000 000)).  % limit environment space

% Your program goes here
i_1([0.55,0.71,0.29,0.51,0.89,0.90,0.13]).
i_2([0.21,0.05,0.44,0.03,0.46,0.65,0.28]).
i_3([0.68,0.59,0.02,0.56,0.26,0.42,0.28]).
i_4([0.69,0.44,0.16,0.54,0.78,0.31,0.22]).
i_5([0.39,0.94,0.98,0.67,0.90,0.85,0.38]).
i_6([0.09,0.65,0.56,0.36,0.23,0.41,0.47]).
i_7([0.27,0.29,0.46,0.86,0.59,0.28,0.28]).
i_8([0.45,0.21,0.20,0.51,0.09,0.48,0.36]).
i_9([0.71,0.75,0.69,0.69,0.37,0.67,0.34]).
i_10([0.57,0.33,0.45,0.06,0.24,0.97,0.23]).
i_11([0.69,0.65,0.72,0.48,0.60,0.07,0.07]).
i_12([0.20,0.15,0.10,0.13,0.55,0.19,0.95]).
i_13([0.68,0.54,0.71,0.26,0.93,0.84,0.73]).
i_14([0.48,0.84,0.74,0.66,0.91,0.63,0.37]).
i_15([0.55,0.20,0.19,0.73,0.78,0.97,0.85]).
i_16([0.54,0.09,0.49,0.93,0.79,0.49,0.46]).
i_17([0.22,0.18,0.07,0.89,0.64,0.14,0.41]).
i_18([0.05,0.21,0.73,0.65,0.48,0.27,0.65]).
i_19([0.96,0.44,0.07,0.06,0.08,0.96,0.54]).
i_20([0.84,0.17,0.26,0.69,0.90,0.34,0.06]).

numerical_inputs[i_1, i_2, i_3, i_4, i_5, i_6, i_7, i_8, i_9, i_10,
                                 i_11, i_12, i_13, i_14,
                                 i_15, i_16, i_17, i_18, i_19, i_20].


/** <examples> Your example queries go here, e.g.
?- member(X, [cat, mouse]).
*/


% With code below we can generate columns which they are different from each other and unique.
columns(C1,C2,C3,C4,C5,C6,C7):-
    column(C1),column(C2),column(C3),column(C4),column(C5),column(C6),column(C7),
    \+C1=C2,\+C1=C3,\+C1=C4,\+C1=C5,\+C1=C6,\+C1=C7,
    \+C2=C3,\+C2=C4,\+C2=C5,\+C2=C6,\+C2=C7,
    \+C3=C4,\+C3=C5,\+C3=C6,\+C3=C7,
    \+C4=C5,\+C4=C6,\+C4=C7,
    \+C5=C6,\+C5=C7,
    \+C6=C7.
% Below we defined our columns's names
column(c1).
column(c2).
column(c3).
column(c4).
column(c5).
column(c6).
column(c7).



       
